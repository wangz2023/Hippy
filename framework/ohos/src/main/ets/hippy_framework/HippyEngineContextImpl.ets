import { HippyLibrary } from '../hippy_library/HippyLibrary';
import { HRRenderViewCreator } from '../renderer_native/components/HippyRenderRegisterMap';
import { NativeRenderProvider } from '../renderer_native/NativeRenderProvider';
import { PixelUtil } from '../support/utils/PixelUtil';
import { TimeMonitor } from '../support/utils/TimeMonitor';
import { VfsManager } from '../vfs/VfsManager';
import { HippyBundleLoader } from './bridge/bundleloader/HippyBundleLoader';
import { HippyBridgeManager } from './bridge/HippyBridgeManager';
import { HippyBridgeManagerImpl } from './bridge/HippyBridgeManagerImpl';
import { DomManager } from './connector/DomManager';
import { JsDriver } from './connector/JsDriver';
import { NativeRenderer } from './connector/NativeRenderer';
import { EngineInitParams } from './HippyEngine';
import { HippyEngineContext } from './HippyEngineContext';
import { HippyGlobalConfigs } from './HippyGlobalConfigs';
import { HippyModuleManagerImpl, HippyNativeModuleCreator } from './modules/HippyModuleManagerImpl';
import { HippyResourceLoader } from './adapter/http/HippyResourceLoader';
import { DefaultProcessor } from '../vfs/DefaultProcessor';
import { HippyModuleManager } from './modules/HippyModuleManager';
import { HippyAPIProvider } from './bridge/HippyAPIProvider';
import { HippyJsException } from './common/HippyJsException';
import { DevSupportManager } from './devsupport/DevSupportManager';
import { DevToolsManager } from './devsupport/DevToolsManager';
import { LogUtils } from '../support/utils/LogUtils';

export class HippyEngineContextImpl implements HippyEngineContext {
  public vfsManager: VfsManager
  public nativeParams: Map<string, Object> = new Map<string, Object>()
  public mCoreBundleLoader: HippyBundleLoader | null = null;
  public nativeRenderProvider: NativeRenderProvider | null = null
  public nativeRenderer: NativeRenderer | null = null
  private mEngineInitParams: EngineInitParams;
  private mGlobalConfigs: HippyGlobalConfigs;
  private mDomManager: DomManager;
  private mMonitor: TimeMonitor;
  private mModuleManager: HippyModuleManager;
  private mBridgeManager: HippyBridgeManager;
  private providers: Array<HippyAPIProvider> | null = null
  private libHippy: HippyLibrary
  private mJsDriver: JsDriver
  // TODO
  private mDevSupportManager: DevSupportManager;

  private mDevToolsManager: DevToolsManager;

  public constructor(
    params: EngineInitParams,
    domManager: DomManager,
    globalConfigs: HippyGlobalConfigs,
    monitor: TimeMonitor,
    coreBundleLoader: HippyBundleLoader | null
  ) {
    this.mEngineInitParams = params;
    this.libHippy = this.mEngineInitParams.libHippy
    this.mGlobalConfigs = globalConfigs;
    const resourceLoader = new HippyResourceLoader(this)
    this.vfsManager = new VfsManager(this.libHippy)
    this.vfsManager.addProcessorAtLast(new DefaultProcessor(resourceLoader))
    this.mDomManager = domManager;
    this.mMonitor = monitor;
    this.mCoreBundleLoader = coreBundleLoader;


    this.providers = this.mEngineInitParams.providers;
    // provider挂载
    let customRenderViewCreatorMap: Map<string, HRRenderViewCreator> | null = null;
    let customMeasureRenderViews: Array<string> | null = null;
    let customNativeModules: Map<string, HippyNativeModuleCreator> | null = null;
    if (this.providers) {
      customRenderViewCreatorMap = new Map();
      customMeasureRenderViews = new Array();
      customNativeModules = new Map();
      for (let provider of this.providers) {
        let apiProviderRenderMap = provider.getCustomRenderViewCreatorMap()
        if (apiProviderRenderMap) {
          apiProviderRenderMap.forEach((value, key) => {
            customRenderViewCreatorMap?.set(key, value)
          })
        }
        let apiProviderMeasureArray = provider.getCustomMeasureRenderViews()
        if (apiProviderMeasureArray) {
          apiProviderMeasureArray.forEach((value) => {
            customMeasureRenderViews?.push(value)
          })
        }
        let apiProviderNativeModules = provider.getCustomNativeModuleCreatorMap();
        if (apiProviderNativeModules) {
          apiProviderNativeModules.forEach((value, key) => {
            customNativeModules?.set(key, value)
          })
        }
      }
    }
    // Render注册
    this.nativeRenderProvider = new NativeRenderProvider(this.libHippy, customRenderViewCreatorMap, customMeasureRenderViews)
    let enableArkCApi = globalConfigs.enableArkCApi()
    this.nativeRenderer = new NativeRenderer(this.libHippy, enableArkCApi, this.nativeRenderProvider, customMeasureRenderViews)
    this.nativeRenderer.attachToDom(this.mDomManager.instanceId)
    // DomManager挂载
    this.mDomManager.attachToRenderer(this.nativeRenderer.instanceId)

    // ModuleManager注册
    this.mModuleManager = new HippyModuleManagerImpl(this);
    this.mModuleManager.addModules(customNativeModules);
    // JsDriver注册
    this.mJsDriver = new JsDriver(this.libHippy, this.mModuleManager)
    // BridgeManager注册
    let bridgeManagerImpl = new HippyBridgeManagerImpl(
      this,
      coreBundleLoader,
      params.enableV8Serialization,
      params.debugMode,
      params.debugServerHost,
      params.groupId,
      params.thirdPartyAdapter,
      params.v8InitParams,
      this.mJsDriver);
    this.mBridgeManager = bridgeManagerImpl
    this.mJsDriver.setBridgeCallback(bridgeManagerImpl)
    this.mDevSupportManager = new DevSupportManager(globalConfigs, params.debugMode, params.debugServerHost,
      params.debugBundleName, params.remoteServerUrl);
    // this.mDevSupportManager.setDevCallback(this);


    this.mDevToolsManager = new DevToolsManager(params.libHippy, true);
    let rs = this.mDevToolsManager.addWangz(1, 2);
    LogUtils.i('wangz', "wangz::" + rs);
    //
    // let gconfig: HippyGlobalConfigs = this.getGlobalConfigs();
    // let gcontext = gconfig.getContext();
    // let localCachePath = gcontext?.cacheDir;
    // localCachePath = localCachePath ? localCachePath : "";
    // let debugUrl = this.getDevSupportManager().createDebugUrl(params.debugServerHost);
    // // String localCachePath = getGlobalConfigs().getContext().getCacheDir()
    // //   .getAbsolutePath();
    // this.mDevToolsManager.create(localCachePath, debugUrl);
    // LogUtils.i('wangz', "wangz2::" +1);


  }

  getLibHippy(): HippyLibrary {
    return this.mEngineInitParams.libHippy
  }

  getDevSupportManager(): DevSupportManager {
    return this.mDevSupportManager;
  }

  onRuntimeInitialized(): void {
    this.mJsDriver.attachToDom(this.mDomManager.instanceId)
  }

  attachDomToRootView(rootId: number): void {
    this.mDomManager.createRootNode(rootId, PixelUtil.getDensity())
    this.mDomManager.attachToRoot(rootId)
  }

  attachJsToRootView(rootId: number): void {
    this.mJsDriver.attachToRoot(rootId)
  }

  getDomManagerId(): number {
    return this.mDomManager.getDomManagerId();
  }

  getVfsId(): number {
    return this.vfsManager.getVfsId();
  }

  getNativeRenderProvider(): NativeRenderProvider | null {
    return this.nativeRenderProvider;
  }

  getComponentName(): string {
    throw new Error('Method not implemented.');
  }

  getVfsManager(): VfsManager {
    return this.vfsManager
  }

  getJsDriver(): JsDriver {
    return this.mJsDriver;
  }

  getMonitor(): TimeMonitor {
    return this.mMonitor;
  }

  getGlobalConfigs(): HippyGlobalConfigs {
    return this.mGlobalConfigs;
  }

  getModuleManager(): HippyModuleManager {
    return this.mModuleManager;
  }

  getBridgeManager(): HippyBridgeManager {
    return this.mBridgeManager;
  }

  getNativeParams(): Map<string, Object> {
    return this.nativeParams
  }

  handleException(error: HippyJsException): void {

  }
}
